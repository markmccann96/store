openapi: 3.0.0
info:
  title: store
  version: '1.0'
  description: A simple store
  contact:
    name: SecuritEase Dev
    url: 'https://www.securitease.com'
    email: internal@securitease.com
  termsOfService: 'https://www.securitease.com'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.htm'
servers:
  - url: 'http://localhost:8080'
    description: dev
paths:
  /order:
    get:
      summary: Get Orders
      description: >
        Get all orders. Supports pagination via `limit` and `offset`.  
        **Backward compatibility:** if `limit` is omitted, all matching records are returned.
      tags: [ order ]
      operationId: getOrders
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of results to return. If omitted, returns all.
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 50
        - name: offset
          in: query
          required: false
          description: Number of results to skip before returning results.
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
          example: 100
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              description: Total number of matching orders (before pagination).
              schema:
                type: integer
                format: int64
            Link:
              description: >
                RFC 8288 pagination links (`next`, `prev`, `first`, `last`).
                Example: `<http://localhost:8080/order?limit=50&offset=50>; rel="next"`.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      summary: Create Order
      tags:
        - order
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URI of the created product resource.
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
      operationId: createOrder
      description: Create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
  /order/{id}:
    get:
      summary: Get Order by ID
      description: Fetch a single order by its unique identifier.
      tags:
        - order
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not Found
      operationId: getOrderById
  /customer:
    get:
      summary: Get Customers
      description: >
        Get all customers. Supports pagination via `limit` and `offset`.  
        **Backward compatibility:** if `limit` is omitted, all matching records are returned.
      tags: [customer]
      operationId: getCustomers
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of results to return. If omitted, returns all.
          schema:
            type: integer
            format: int32
            minimum: 1
          example: 50
        - name: offset
          in: query
          required: false
          description: Number of results to skip before returning results.
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
          example: 100
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              description: Total number of matching customers (before pagination).
              schema:
                type: integer
                format: int64
            Link:
              description: >
                RFC 8288 pagination links (`next`, `prev`, `first`, `last`).
                Example: `<http://localhost:8080/customer?limit=50&offset=50>; rel="next"`.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create Customer
      tags:
        - customer
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URI of the created product resource.
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
      operationId: createCustomer
      description: Create a new customer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
  /customer/{id}:
    get:
      summary: Get Customer by ID
      description: Fetch a single customer by their unique identifier.
      tags:
        - customer
      parameters:
        - name: id
          in: path
          required: true
          description: Customer ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '404':
          description: Not Found
      operationId: getCustomerById
  /customer/search:
    get:
      summary: Search Customers
      description: Search customers by partial name (case-insensitive substring match). Supports pagination.
      tags:
        - customer
      operationId: searchCustomers
      parameters:
        - name: name
          in: query
          description: Partial name to search for (e.g., "ann" matches "Ann", "Joanne").
          required: true
          schema:
            type: string
            minLength: 1
            example: ann
        - name: limit
          in: query
          description: Maximum number of results to return.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 1
            example: 50
        - name: offset
          in: query
          description: Number of results to skip before starting to return results.
          required: false
          schema:
            type: integer
            format: int32
            minimum: 0
            default: 0
            example: 100
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              description: Total number of matching customers (before pagination).
              schema:
                type: integer
                format: int64
              example: 137
            Link:
              description: >
                Pagination links per RFC 5988/8288; may include relations: `next`, `prev`, `first`, `last`.
                Each value is in the form: `<url>; rel="next"`.
              schema:
                type: string
              example: <
                http://localhost:8080/customer/search?name=ann&limit=25&offset=25
                >; rel="next", <
                http://localhost:8080/customer/search?name=ann&limit=25&offset=0
                >; rel="first"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
  /products:
    get:
      summary: Get Products
      description: >
        Get all products. Supports pagination via `limit` and `offset`.
        **Backward compatibility:** if `limit` is omitted, return all matching records.
      tags: [product]
      operationId: getProducts
      parameters:
        - name: limit
          in: query
          required: false
          description: Maximum number of results to return. If omitted, returns all.
          schema: { type: integer, format: int32, minimum: 1 }
          example: 50
        - name: offset
          in: query
          required: false
          description: Number of results to skip before returning results.
          schema: { type: integer, format: int32, minimum: 0, default: 0 }
          example: 100
      responses:
        '200':
          description: OK
          headers:
            X-Total-Count:
              description: Total number of matching products (before pagination).
              schema: { type: integer, format: int64 }
            Link:
              description: >
                RFC 8288 pagination links (`next`, `prev`, `first`, `last`).
                Example: `<http://localhost:8080/products?limit=50&offset=50>; rel="next"`.
              schema: { type: string }
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: Create Product
      description: Create a new product.
      tags: [product]
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Created
          headers:
            Location:
              description: URI of the created product resource.
              schema: { type: string, format: uri }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad Request
        '409':
          description: Conflict (e.g., duplicate ID)

  /products/{id}:
    get:
      summary: Get Product by ID
      tags: [product]
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer, format: int64 }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Not Found
components:
  schemas:
    # Full representation for reads (includes which orders contain the product)
    Product:
      type: object
      required: [ id, description, orders ]
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        orders:
          description: IDs of orders that include this product.
          type: array
          items:
            type: integer
            format: int64

    # Payload used to create a product.
    # If your ID is server-generated, drop it from "required" and/or remove it entirely.
    ProductCreate:
      type: object
      required: [ description ]   # make [id, description] if client supplies ID
      properties:
        id:
          type: integer
          format: int64
          description: Optional client-supplied ID.
        description:
          type: string

    # Lightweight product shape for embedding inside Order
    ProductSummary:
      type: object
      required: [ id, description ]
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
    Order:
      title: Order
      type: object
      properties:
        id:
          type: integer
          format: int64
        description:
          type: string
        products:
          description: Products contained in this order.
          type: array
          items:
            $ref: '#/components/schemas/ProductSummary'
        customer:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
    Customer:
      title: Customer
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        orders:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              description:
                type: string
                x-stoplight:
                  id: mq08x82g95zl9
tags:
  - name: order
    description: store operations that focus on order operations
  - name: customer
    description: store operations that focus on the customer operations
  - name: product
    description: store operations that focus on the product operations
